<!DOCTYPE html>
<html>
<head>
  <script src='js/audiobuffer.js'></script>
  <script src='js/jquery-1.6.2.js'></script>

</head>
<body>


  <style>
   

    #playmarker {
      width:0px;
      height:5px;
      background:#0f0;
      z-index:99999;
      transition:20ms width linear;
      position:fixed;
      top:0;
      left:0;
    }
    #webcam {
      visibility: hidden;
      display:none;
    }
  </style>


  <div id="playmarker"></div>

  <video id="webcam" autoplay></video>

  <canvas width="200" height="133" id="canvasElement"></canvas>
  <canvas width="200" height="133" id="canvasFiltered"></canvas>
  <canvas width="200" height="133" id="canvasOverlay"></canvas>
  
  <div id="config" style="position:absolute;top:10px;right:10px;">
    <p>
      <label>Webcam Left</label>
      <input id="webcamTop" type="range" min="-200" step=1 max="0" />
    </p>
    <p>
      <label>Webcam Top</label>
      <input id="webcamLeft" type="range" min="-200" step=1 max="0" />
    </p>
    <p>
      <label>Webcam Width</label>
      <input id="webcamWidth" type="range" min="0" step=1 max="300" />
    </p>
    <p>
      <label>Webcam Height</label>
      <input id="webcamHeight" type="range" min="0" step=1 max="200" />
    </p>
    <button onclick="$('#config').hide()">Hide config</button>
  </div>

  <script type="text/javascript">

  






var context = new webkitAudioContext();
    
  var timeDelay = 50;

  var webCamActive = false;

  /*
    TODO
    - audio distortion
    - checking right hand side audio


   */


    var playmarker = document.getElementById("playmarker");

    var width = 200;
    var height = 133
    var activeColumn = -1;

    var webcamStart = {
      top:0,
      left:0
    }

    var webcamSize = {
      width:width,
      height:height
    }


    $(document).ready(function() {
      $('#webcamTop').change(function() {
        webcamStart.top = $(this).val();
      });
      $('#webcamLeft').change(function() {
        webcamStart.left = $(this).val();
      });
      $('#webcamWidth').change(function() {
        webcamSize.width = $(this).val();
      });
      $('#webcamHeight').change(function() {
        webcamSize.height = $(this).val();
      });
    });

    var rows = 8;
    var columns = 16;

    // var currentMatrix = [];
    // var previousMatrix = [];
    // var matrix = [];
    // 
    // for (var i = 0; i < rows; i++) {
    //   var arr = [];
    //   for (var j = 0; j < columns; j++) {
    //     arr.push(false);
    //   }
    //   matrix.push(arr);
    // }



    var context = initializeNewWebAudioContext();
    context.loadSound('tones/tone8.wav', 'tone1');
    context.loadSound('tones/tone7.wav', 'tone2');
    context.loadSound('tones/tone6.wav', 'tone3');
    context.loadSound('tones/tone5.wav', 'tone4');
    context.loadSound('tones/tone4.wav', 'tone5');
    context.loadSound('tones/tone3.wav', 'tone6');
    context.loadSound('tones/tone2.wav', 'tone7');
    context.loadSound('tones/tone1.wav', 'tone8');


    playNote = function(index) {
      if (index === -1) return;

      context.playSound('tone' + (index + 1));

    }





    // 
    // matrixUpdated = function() {
    // 
    // }
    
    columnChange = function(column) {
      var matrix = combinedMatrixes();
      activeColumn = column;

      // for each row check the column
      for (var i = 0; i < rows; i++ ) {
        var row = matrix[i];
        if (row[column] === true) {
          playNote(i);
        }
      }
      return;




      if (!matrix[column]) {
        console.log("dropped column");
        return;
      }
      for (var i = 0, len = matrix[column].length; i < len; i++) {
        if (matrix[column][i] === true) {
          playNote(i);
        }
      }
    }
    

    var playMarkerLeft = 0;
    
    movePlaymarker = function() {
      playMarkerLeft += 5;
      if (playMarkerLeft > width) {
        playMarkerLeft = 0;
      }
    
      var thisColumn = parseInt(playMarkerLeft / (width / columns));
    
      if (thisColumn !== activeColumn) {
        columnChange(thisColumn);
      }

      playmarker.style.width = playMarkerLeft + "px";
    }
    
    setInterval(movePlaymarker, 100);





    var ctx = canvasElement.getContext('2d');
    var ctxOverlay = canvasOverlay.getContext('2d');
    var ctxFiltered = canvasFiltered.getContext('2d');

    var x, y;

<<<<<<< HEAD
    var threshold = 125;
=======
    var threshold = 130;
>>>>>>> d88081497b7541054431c3830d7765aba4c804dd
    
    function drawOverlay() {
      ctxOverlay.clearRect(0,0,360,240);
      ctxOverlay.fillStyle = "rgba(255,200,0,0.5)";
          var rowHeight = height / rows;
          var columnWidth = width / columns;
      var matrix = combinedMatrixes();
      for (var i=0; i < matrix.length; i++) {
        for (var j=0; j < matrix[i].length; j++) {
          if (matrix[i][j]) drawSquare(j*columnWidth,i*rowHeight);
          
        };
      };
      
      function drawSquare(x, y) {
        if (x / columnWidth === activeColumn) {
              ctxOverlay.fillStyle = "rgba(0,200,0,0.5)";
            } else {
              ctxOverlay.fillStyle = "rgba(255,200,0,0.5)";
            }
            ctxOverlay.fillRect(x, y, columnWidth, rowHeight);
      }
    };
    
    function detect() {
      if (!webCamActive) return;
      
      var image = ctx.getImageData(0,0,360,240);
      var filteredImageData = chromaKeyFilter(image);
      
      
      var rowHeight = height / rows;
      var columnWidth = width / columns;
      
      var newMatrix = [];

      
      // for each row
      for (var y=0, lenY = rows * rowHeight; y < lenY; y+=rowHeight) {
        var row = [];
        // for each column
        for (var x=0, lenX = columns * columnWidth; x < lenX; x+=columnWidth) {
          
          var filteredImageData = ctxFiltered.getImageData(x,y,columnWidth,rowHeight).data;
          // var filteredImageData = chromaKeyFilter(imageData);
          var total = 0;
          // for every pixel in the square
          for (var k=0, lenK = filteredImageData.length; k < lenK; k++) {
            if (filteredImageData[k+3] != 0) {
              total += 1
            }
          };
          
          row.push(total > threshold);
        };
        newMatrix.push(row);
      };
      addMatrix(newMatrix);
      drawOverlay()
    }
    setInterval(detect, timeDelay);

    
    var oldMatrixes = [];
    function addMatrix(newMatrix) {
      if (oldMatrixes.length > 200) oldMatrixes.pop() // pop oldest
      oldMatrixes.unshift(newMatrix); // add new matrix
    }
    
    function combinedMatrixes() {
      combinedMatrix = [];
      // for each row in the matrix
      for (var i=0; i < rows; i++) {
        combinedMatrix.push([]);
        // for each cell in the row
        for (var j=0; j < columns; j++) {
          // for each old matrix
          var isSelected = false;
          for (var k=0; k < oldMatrixes.length; k++) {
            if (oldMatrixes[k][i][j]) {
              isSelected = true;
            }
          }
          combinedMatrix[i][j] = isSelected;
        }
      }
      return combinedMatrix;
    }
    
    
    function chromaKeyFilter(image) {
      var l = image.data.length / 4;
      for (var i = 0; i < l; i++) {
        var r = image.data[i * 4 + 0];
        var g = image.data[i * 4 + 1];
        var b = image.data[i * 4 + 2];
        
        // if (g > 100 && r < 100 && b < 100)
          // image.data[i * 4 + 3] = 0;
        
        // If more green than others
         if (g > r && g > b)
             image.data[i * 4 + 3] = 0;
        
         if (g > 200 && r > 200 && b > 200)
             image.data[i * 4 + 3] = 0;
          
        
        // if orange
        // var hsl = rgbToHsl(r,g,b);
        //   if (hsl.h > 0.18 || hsl.h < 0.038) image.data[i * 4 + 3] = 0;
        //   if (hsl.s < 0.1) image.data[i * 4 + 3] = 0;
        //   if (hsl.l < 0.4) image.data[i * 4 + 3] = 0;
        
        // if not green
          // var hsl = rgbToHsl(r,g,b);
          //   if (!(hsl.h > 0.5 || hsl.h < 0.17)) image.data[i * 4 + 3] = 0;
          //    if (hsl.s < 0.1) image.data[i * 4 + 3] = 0;
          //    if (hsl.l < 0.1) image.data[i * 4 + 3] = 0;
        
      }
      
      ctxFiltered.putImageData(image, 0, 0);
      
      return image.data;
    }
    
    
    
    
    function rgbToHsl(r, g, b){
        r /= 255, g /= 255, b /= 255;
        var max = Math.max(r, g, b), min = Math.min(r, g, b);
        var h, s, l = (max + min) / 2;

        if(max == min){
            h = s = 0; // achromatic
        }else{
            var d = max - min;
            s = l > 0.5 ? d / (2 - max - min) : d / (max + min);
            switch(max){
                case r: h = (g - b) / d + (g < b ? 6 : 0); break;
                case g: h = (b - r) / d + 2; break;
                case b: h = (r - g) / d + 4; break;
            }
            h /= 6;
        }

        return {h:h, s:s, l:l};
    }



    var video;

if (navigator.getUserMedia) {}
else if (navigator.webkitGetUserMedia) { navigator.getUserMedia = navigator.webkitGetUserMedia}
else if (navigator.mozGetUserMedia) { navigator.getUserMedia = navigator.mozGetUserMedia}
else if (navigator.msGetUserMedia) { navigator.getUserMedia = navigator.msGetUserMedia}





   var onFailSoHard = function(e) {
    console.log('Reeeejected!', e);
  };


  window.URL = window.URL || window.webkitURL;
  navigator.getUserMedia  = navigator.getUserMedia || navigator.webkitGetUserMedia ||
                            navigator.mozGetUserMedia || navigator.msGetUserMedia;

  video = document.querySelector('video');

  if (navigator.getUserMedia) {

      navigator.getUserMedia({audio: true, video: true}, function(stream) {
       video.src = window.URL.createObjectURL(stream);
       webCamActive = true;


       function draw(v,c,w,h) {



          c.drawImage(v,webcamStart.top,webcamStart.left,webcamSize.width,webcamSize.height);
          setTimeout(draw,timeDelay,v,c,w,h);
      }

      

      console.log(ctx);

      draw(video, ctx, canvasElement.clientWidth, canvasElement.clientHeight);


       //initialize();
      }, onFailSoHard);
    

  } else {
    video.src = 'somevideo.webm'; // fallback.
  }


  </script>
  
  <style type="text/css" media="screen">
    canvas {
      position: absolute;
      top: 0;
      left: 0;
    }
    canvas {
      border: 1px solid black;
    }
    #canvasFiltered {
      display: none;
    }
  </style>
</body>
</html>